from __future__ import annotations

from dataclasses import dataclass
from pathlib import Path

BINARY_PATH = Path("AwesomeCleaner.app/Contents/MacOS/AwesomeCleaner")
KEY_EVEN = 0x41
KEY_ODD = 0x20
CONFIG_START = 0x1CD90
CONFIG_END = 0x1D1F0


def _decode_byte(byte: int, index: int) -> int:
    key = KEY_EVEN if index % 2 == 0 else KEY_ODD
    return byte ^ key


def decode_cstring(data: bytes, start: int) -> str:
    chars: list[str] = []
    index = 0
    while (start + index) < len(data):
        decoded = _decode_byte(data[start + index], index)
        if decoded == 0 or not (32 <= decoded <= 126):
            break
        chars.append(chr(decoded))
        index += 1
    return ''.join(chars)


def clean(text: str) -> str:
    return text.split(' A')[0].strip()


def main() -> None:
    data = BINARY_PATH.read_bytes()

    raw_base = decode_cstring(data, 0x1CD90)
    raw_profile = decode_cstring(data, 0x1CE78)
    raw_cache = decode_cstring(data, 0x1CEA0)
    raw_archive = decode_cstring(data, 0x1CF10)
    raw_keychain_path = decode_cstring(data, 0x1D000)

    base_url = clean(raw_base)
    profile_name = clean(raw_profile)
    keychain_path = clean(raw_keychain_path)

    print("Decoded configuration artefacts:\n")
    print(f"  Base URL       : {base_url}")
    print(f"  Endpoint name  : {profile_name}")
    print(f"  Chrome cache   : {clean(raw_cache)}")
    print(f"  Archive suffix : {clean(raw_archive)}")
    print(f"  Keychain file  : {keychain_path}")
    print()

    keychain_endpoint = "Keychain"
    print("Derived C2 endpoints (alphabetical):")
    for name in sorted({keychain_endpoint, profile_name}):
        print(f"  - {name}")

    print("\nStaged files:")
    print("  - Chrome profile -> ~/Library/Caches/Google/Chrome/Default/Cache/Cache_Data")
    print("  - Login keychain -> ~/Library/Keychains/login.keychain-db")


if __name__ == "__main__":
    main()
